<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>-- Definitions: (DO NOT CHANGE!)
openProcess("Piano-FX-Pro.exe")
Microseconds="Piano-FX-Pro.exe+941650"
Ticks="Piano-FX-Pro.exe+9416F4"
Resolution="Piano-FX-Pro.exe+93D318"
Volume="Piano-FX-Pro.exe+941508"
Mute="Piano-FX-Pro.exe+9414F6"
PlaybackSpeed="Piano-FX-Pro.exe+9414F8"
NoteSpeed="Piano-FX-Pro.exe+941500"
OffsetX="Piano-FX-Pro.exe+941520"
OffsetY="Piano-FX-Pro.exe+941524"
Zoom="Piano-FX-Pro.exe+941528"
StartKey="Piano-FX-Pro.exe+941424"
EndKey="Piano-FX-Pro.exe+941428"
KeyMode="Piano-FX-Pro.exe+941420"
Width="Piano-FX-Pro.exe+93D310"
Height="Piano-FX-Pro.exe+93D314"
Paused="Piano-FX-Pro.exe+9414F5"
Keyboard="Piano-FX-Pro.exe+941519"
VisualizePitchBends="Piano-FX-Pro.exe+941578"
PhigrosMode="Piano-FX-Pro.exe+941550"
ShowMarkers="Piano-FX-Pro.exe+941549"
TickBased="Piano-FX-Pro.exe+941548"
DisableUI="Piano-FX-Pro.exe+9415A2"
LimitFPS="Piano-FX-Pro.exe+9414C9"
Caption="Piano-FX-Pro.exe+93D320"
MS=1e+3
S=1e+6
EXE=executeCodeLocalEx
hPFX=EXE("FindWindowA","PFX",0)
hGFX=EXE("FindWindowExA",hPFX,0,"PFXGFX",0)
hGDI=EXE("FindWindowA","PFXGDI",0)
PFXdc=EXE("GetDC",hGFX)
GDIdc=EXE("GetDC",hGDI)
SRCCOPY=0x00CC0020
SRCPAINT=0x00EE0086
SRCAND=0x008800C6
SRCINVERT=0x00660046
SRCERASE=0x00440328
NOTSRCCOPY=0x00330008
NOTSRCERASE=0x001100A6
MERGECOPY=0x00C000CA
MERGEPAINT=0x00BB0226
PATCOPY=0x00F00021
PATPAINT=0x00FB0A09
PATINVERT=0x005A0049
DSTINVERT=0x00550009
BLACKNESS=0x00000042
WHITENESS=0x00FF0062
BS_SOLID=0
BS_NULL=1
BS_HOLLOW=BS_NULL
BS_HATCHED=2
BS_PATTERN=3
BS_INDEXED=4
BS_DIBPATTERN=5
BS_DIBPATTERNPT=6
BS_PATTERN8X8=7
BS_DIBPATTERN8X8=8
BS_MONOPATTERN=9
HS_HORIZONTAL=0
HS_VERTICAL=1
HS_FDIAGONAL=2
HS_BDIAGONAL=3
HS_CROSS=4
HS_DIAGCROSS=5
HS_API_MAX=12
PS_SOLID=0
PS_DASH=1
PS_DOT=2
PS_DASHDOT=3
PS_DASHDOTDOT=4
PS_NULL=5
PS_INSIDEFRAME=6
PS_USERSTYLE=7
PS_ALTERNATE=8
PS_STYLE_MASK=0x0000000F
PS_ENDCAP_ROUND=0x00000000
PS_ENDCAP_SQUARE=0x00000100
PS_ENDCAP_FLAT=0x00000200
PS_ENDCAP_MASK=0x00000F00
PS_JOIN_ROUND=0x00000000
PS_JOIN_BEVEL=0x00001000
PS_JOIN_MITER=0x00002000
PS_JOIN_MASK=0x0000F000
PS_COSMETIC=0x00000000
PS_GEOMETRIC=0x00010000
PS_TYPE_MASK=0x000F0000
ALIGN_LEFT=0x0100
ALIGN_CENTER=0x0200
ALIGN_RIGHT=0x0300
ALIGN_TOP=0x0001
ALIGN_MIDDLE=0x0002
ALIGN_BOTTOM=0x0003
WHITE_BRUSH=0
LTGRAY_BRUSH=1
GRAY_BRUSH=2
DKGRAY_BRUSH=3
BLACK_BRUSH=4
NULL_BRUSH=5
HOLLOW_BRUSH=NULL_BRUSH
WHITE_PEN=6
BLACK_PEN=7
NULL_PEN=8
MEM=createMemoryStream()
function GetMicroseconds()
return readQword(Microseconds)
end
function GetTicks()
return readInteger(Ticks,true)
end
function GetPPQ()
return readInteger(Resolution)
end
function GetVolume()
return readDouble(Volume)
end
function GetMute()
return readByte(Mute)
end
function GetPlaybackSpeed()
return readDouble(PlaybackSpeed)
end
function GetNoteSpeed()
return readDouble(NoteSpeed)
end
function GetStartKey()
return readInteger(StartKey)
end
function GetEndKey()
return readInteger(EndKey)
end
function GetKeyMode()
return readInteger(KeyMod)
end
function GetOffsetX()
return readFloat(OffsetX)
end
function GetOffsetY()
return readFloat(OffsetY)
end
function GetZoom()
return readFloat(Zoom)
end
function GetWidth()
return readInteger(Width)
end
function GetHeight()
return readInteger(Height)
end
function GetPaused()
return readByte(Paused)
end
function GetKeyboard()
return readByte(Keyboard)
end
function GetVisualizePitchBends()
return readByte(VisualizePitchBends)
end
function GetPhigrosMode()
return readByte(PhigrosMode)
end
function GetShowMarkers()
return readByte(ShowMarkers)
end
function GetTickBased()
return readByte(TickBased)
end
function GetDisableUI()
return readByte(DisableUI)
end
function GetLimitFPS()
return readByte(LimitFPS)
end
function GetCaption()
return readString(Caption)
end
function SetMicroseconds(VAL)
writeQword(Microseconds,VAL)
end
function SetVolume(VAL)
writeDouble(Volume,VAL)
end
function SetMute(VAL)
writeByte(Mute,VAL)
end
function SetPlaybackSpeed(VAL)
writeDouble(PlaybackSpeed,VAL)
end
function SetNoteSpeed(VAL)
writeDouble(NoteSpeed,VAL)
end
function SetStartKey(VAL)
writeInteger(StartKey,VAL)
end
function SetEndKey(VAL)
writeInteger(EndKey,VAL)
end
function SetKeyMode(VAL)
writeInteger(KeyMode,VAL)
end
function SetOffsetX(VAL)
writeFloat(OffsetX,VAL)
end
function SetOffsetY(VAL)
writeFloat(OffsetY,VAL)
end
function SetZoom(VAL)
writeFloat(Zoom,VAL)
end
function SetWidth(VAL)
MEM.Position=0
MEM.size=16
EXE("GetWindowRect",hPFX,MEM.Memory)
MEM.Position=0
local Px=MEM.readDword()
local Py=MEM.readDword()
local Pw=MEM.readDword()-Px
local Ph=MEM.readDword()-Py
MEM.Position=0
MEM.size=16
EXE("GetWindowRect",hGFX,MEM.Memory)
MEM.Position=0
local Gx=MEM.readDword()
local Gy=MEM.readDword()
local Gw=MEM.readDword()-Gx
local Gh=MEM.readDword()-Gy
local Margin=Pw-Gw
MEM.Position=0
EXE("SetWindowPos",hPFX,-2,Px,Py,VAL+Margin,Ph,0)
end
function SetHeight(VAL)
MEM.Position=0
MEM.size=16
EXE("GetWindowRect",hPFX,MEM.Memory)
MEM.Position=0
local Px=MEM.readDword()
local Py=MEM.readDword()
local Pw=MEM.readDword()-Px
local Ph=MEM.readDword()-Py
MEM.Position=0
MEM.size=16
EXE("GetWindowRect",hGFX,MEM.Memory)
MEM.Position=0
local Gx=MEM.readDword()
local Gy=MEM.readDword()
local Gw=MEM.readDword()-Gx
local Gh=MEM.readDword()-Gy
local Margin=Ph-Gh
MEM.Position=0
EXE("SetWindowPos",hPFX,-2,Px,Py,Pw,VAL+Margin,0)
end
function SetPaused(VAL)
writeByte(Paused,VAL)
end
function SetKeyboard(VAL)
writeByte(Keyboard,VAL)
end
function SetVisualizePitchBends(VAL)
writeByte(VisualizePitchBends,VAL)
end
function SetPhigrosMode(VAL)
writeByte(PhigrosMode,VAL)
end
function SetShowMarkers(VAL)
writeByte(ShowMarkers,VAL)
end
function SetTickBased(VAL)
writeByte(TickBased,VAL)
end
function SetDisableUI(VAL)
writeByte(DisableUI,VAL)
end
function SetLimitFPS(VAL)
writeByte(LimitFPS,VAL)
end
function SetCaption(VAL)
writeByte(getAddress(Caption)+#VAL,0);writeString(Caption,VAL)
end
function EaseLinear(x)
return x
end
function EaseInSine(x)
return 1-math.cos((x*math.pi)/2)
end
function EaseOutSine(x)
return math.sin((x*math.pi)/2)
end
function EaseInOutSine(x)
return -(math.cos(math.pi*x)-1)/2
end
function EaseInQuad(x)
return x*x
end
function EaseOutQuad(x)
return 1-(1-x)*(1-x)
end
function EaseInOutQuad(x)
return x&lt;0.5 and 2*x*x or 1-math.pow(-2*x+2,2)/2
end
function EaseInCubic(x)
return x*x*x
end
function EaseOutCubic(x)
return 1-math.pow(1-x,3)
end
function EaseInOutCubic(x)
return x&lt;0.5 and 4*x*x*x or 1-math.pow(-2*x+2,3)/2
end
function EaseInQuart(x)
return x*x*x*x
end
function EaseOutQuart(x)
return 1-math.pow(1-x,4)
end
function EaseInOutQuart(x)
return x&lt;0.5 and 8*x*x*x*x or 1-math.pow(-2*x+2,4)/2
end
function EaseInQuint(x)
return x*x*x*x*x
end
function EaseOutQuint(x)
return 1-math.pow(1-x,5)
end
function EaseInOutQuint(x)
return x&lt;0.5 and 16*x*x*x*x*x or 1-math.pow(-2*x+2,5)/2
end
function EaseInExpo(x)
return x == 0 and 0 or math.pow(2,10*x-10)
end
function EaseOutExpo(x)
return x == 1 and 1 or 1-math.pow(2,-10*x)
end
function EaseInOutExpo(x)
return x == 0 and 0 or x == 1 and 1 or x&lt;0.5 and math.pow(2,20*x-10)/2 or (2-math.pow(2,-20*x+10))/2
end
function EaseInCirc(x)
return 1-math.sqrt(1-math.pow(x,2))
end
function EaseOutCirc(x)
return math.sqrt(1-math.pow(x-1,2))
end
function EaseInOutCirc(x)
return x&lt;0.5 and (1-math.sqrt(1-math.pow(2*x,2)))/2 or (math.sqrt(1-math.pow(-2*x+2,2))+1)/2
end
function EaseInBack(x)
local c1=1.70158
local c3=c1+1
return c3*x*x*x-c1*x*x
end
function EaseOutBack(x)
local c1=1.70158
local c3=c1+1
return 1+c3*math.pow(x-1,3)+c1*math.pow(x-1,2)
end
function EaseInOutBack(x)
local c1=1.70158
local c2=c1*1.525
return x&lt;0.5 and (math.pow(2*x,2)*((c2+1)*2*x-c2))/2 or (math.pow(2*x-2,2)*((c2+1)*(x*2-2)+c2)+2)/2
end
function EaseInElastic(x)
local c4=(2*math.pi)/3
return x == 0 and 0 or x == 1 and 1 or -math.pow(2,10*x-10)*math.sin((x*10-10.75)*c4)
end
function EaseOutElastic(x)
local c4=(2*math.pi)/3
return x == 0 and 0 or x == 1 and 1 or math.pow(2,-10*x)*math.sin((x*10-0.75)*c4)+1
end
function EaseInOutElastic(x)
local c5=(2*math.pi)/4.5
return x == 0 and 0 or x == 1 and 1 or x&lt;0.5 and -(math.pow(2,20*x-10)*math.sin((20*x-11.125)*c5))/2 or (math.pow(2,-20*x+10)*math.sin((20*x-11.125)*c5))/2+1
end
function EaseInBounce(x)
return 1-EaseOutBounce(1-x)
end
function EaseOutBounce(x)
local n1=7.5625
local d1=2.75
if x&lt;1/d1 then
return n1*x*x
elseif x&lt;2/d1 then
return n1*(x-1.5/d1)*(x-1.5/d1)+0.75
elseif x&lt;2.5/d1 then
return n1*(x-2.25/d1)*(x-2.25/d1)+0.9375
else
return n1*(x-2.625/d1)*(x-2.625/d1)+0.984375
end
end
function EaseInOutBounce(x)
return x&lt;0.5 and (1-EaseOutBounce(1-2*x))/2 or (1+EaseOutBounce(2*x-1))/2
end
function SmoothAnimationByTime(StartValue,EndValue,StartTime,EndTime,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetMicroseconds()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
while (GetMicroseconds() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetMicroseconds()-StartTime)/(EndTime-StartTime))*(EndValue-StartValue))
coroutine.yield()
end
SetValueFunction(EndValue)
end)
end
function TargetAnimationByTime(GetValueFunction,TargetValue,StartTime,EndTime,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetMicroseconds()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
local StartValue=GetValueFunction()
while (GetMicroseconds() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetMicroseconds()-StartTime)/(EndTime-StartTime))*(TargetValue-StartValue))
coroutine.yield()
end
SetValueFunction(TargetValue)
end)
end
function SlicedSmoothAnimationByTime(StartValue,EndValue,StartTime,EndTime,Spacing,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetMicroseconds()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
local SliceIndex=1
while (GetMicroseconds() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetMicroseconds()-StartTime)/(EndTime-StartTime))*(EndValue-StartValue))
while (GetMicroseconds()&lt;StartTime+Spacing*SliceIndex and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
SliceIndex=SliceIndex+1
end
SetValueFunction(EndValue)
end)
end
function SlicedTargetAnimationByTime(GetValueFunction,TargetValue,StartTime,EndTime,Spacing,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetMicroseconds()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
local StartValue=GetValueFunction()
local SliceIndex=1
while (GetMicroseconds() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetMicroseconds()-StartTime)/(EndTime-StartTime))*(TargetValue-StartValue))
while (GetMicroseconds()&lt;StartTime+Spacing*SliceIndex and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
SliceIndex=SliceIndex+1
end
SetValueFunction(TargetValue)
end)
end
function InstantaneousAnimationByTime(Value,Time,SetValueFunction)
return coroutine.create(function()
while (GetMicroseconds()&lt;Time and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
SetValueFunction(Value)
end)
end
function SmoothAnimationByTick(StartValue,EndValue,StartTime,EndTime,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetTicks()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
while (GetTicks() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetTicks()-StartTime)/(EndTime-StartTime))*(EndValue-StartValue))
coroutine.yield()
end
SetValueFunction(EndValue)
end)
end
function TargetAnimationByTick(GetValueFunction,TargetValue,StartTime,EndTime,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetTicks()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
local StartValue=GetValueFunction()
while (GetTicks() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetTicks()-StartTime)/(EndTime-StartTime))*(TargetValue-StartValue))
coroutine.yield()
end
SetValueFunction(TargetValue)
end)
end
function SlicedSmoothAnimationByTick(StartValue,EndValue,StartTime,EndTime,Spacing,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetTicks()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
local SliceIndex=1
while (GetTicks() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetTicks()-StartTime)/(EndTime-StartTime))*(EndValue-StartValue))
while (GetTicks()&lt;StartTime+Spacing*SliceIndex and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
SliceIndex=SliceIndex+1
end
SetValueFunction(EndValue)
end)
end
function SlicedTargetAnimationByTick(GetValueFunction,TargetValue,StartTime,EndTime,Spacing,EasingFunction,SetValueFunction)
return coroutine.create(function()
while (GetTicks()&lt;StartTime and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
local StartValue=GetValueFunction()
local SliceIndex=1
while (GetTicks() &lt;= EndTime and GetTicks()&lt;TotalTicks) do
SetValueFunction(StartValue+EasingFunction((GetTicks()-StartTime)/(EndTime-StartTime))*(TargetValue-StartValue))
while (GetTicks()&lt;StartTime+Spacing*SliceIndex and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
SliceIndex=SliceIndex+1
end
SetValueFunction(TargetValue)
end)
end
function InstantaneousAnimationByTick(Value,Time,SetValueFunction)
return coroutine.create(function()
while (GetTicks()&lt;Time and GetTicks()&lt;TotalTicks) do
coroutine.yield()
end
SetValueFunction(Value)
end)
end
function CenterX(Zoom)
return (GetWidth()*(1-Zoom))/2
end
function CenterY(Zoom)
return -(GetHeight()*(1-Zoom))/2
end
function RunThreads(Threads)
local Working=true
while Working do
Working=false
for _,ThisThread in pairs(Threads) do
if coroutine.status(ThisThread) ~= "dead" then
coroutine.resume(ThisThread)
Working=true
end
end
end
end
function RunShaderByTime(StartTime,EndTime,ShaderFunction,...)
local EffectParameters={...}
if hGDI==0 then return end
createThread(function()
while GetMicroseconds()&lt;StartTime and GetTicks()&lt;TotalTicks do end
while GetMicroseconds()&lt;=EndTime and GetTicks()&lt;TotalTicks do
ShaderFunction((GetMicroseconds()-StartTime)/(EndTime-StartTime),table.unpack(EffectParameters))
end
end).resume()
end
function RunShaderByTick(StartTime,EndTime,ShaderFunction,...)
local EffectParameters={...}
if hGDI==0 then return end
createThread(function()
while GetTicks()&lt;StartTime and GetTicks()&lt;TotalTicks do end
while GetTicks()&lt;=EndTime and GetTicks()&lt;TotalTicks do
ShaderFunction((GetTicks()-StartTime)/(EndTime-StartTime),table.unpack(EffectParameters))
end
end).resume()
end
function RunShaderByTimeAndWait(StartTime,EndTime,ShaderFunction,...)
local EffectParameters={...}
if hGDI==0 then return end
while GetMicroseconds()&lt;StartTime and GetTicks()&lt;TotalTicks do end
while GetMicroseconds()&lt;=EndTime and GetTicks()&lt;TotalTicks do
ShaderFunction((GetMicroseconds()-StartTime)/(EndTime-StartTime),table.unpack(EffectParameters))
end
end
function RunShaderByTickAndWait(StartTime,EndTime,ShaderFunction,...)
local EffectParameters={...}
if hGDI==0 then return end
while GetTicks()&lt;StartTime and GetTicks()&lt;TotalTicks do end
while GetTicks()&lt;=EndTime and GetTicks()&lt;TotalTicks do
ShaderFunction((GetTicks()-StartTime)/(EndTime-StartTime),table.unpack(EffectParameters))
end
end
-- Custom Definitions: (Version: x.xx)

-- GDI Shaders:
function PlainShader(t)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,SRCCOPY)
end
function DarkBlankShader(t)
EXE("PatBlt",GDIdc,0,0,GetWidth(),GetHeight(),BLACKNESS)
end
function BrightBlankShader(t)
EXE("PatBlt",GDIdc,0,0,GetWidth(),GetHeight(),WHITENESS)
end
function WaveShader(t,MaxWaveHeight,MinWaveHeight,ShiftingAmount)
if MaxWaveHeight==nil then MaxWaveHeight=10 end
if MinWaveHeight==nil then MinWaveHeight=5 end
if ShiftingAmount==nil then ShiftingAmount=10 end
local i=0
while i&lt;=GetHeight() do
EXE("BitBlt",GDIdc,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),i,GetWidth(),MaxWaveHeight,PFXdc,0,i,SRCCOPY)
i=i+math.random(MinWaveHeight,MaxWaveHeight)
end
end
function GlitchShader(t,MaxSectionWidth,MinSectionWidth,ShiftingAmount)
if MaxSectionWidth==nil then MaxSectionWidth=150 end
if MinSectionWidth==nil then MinSectionWidth=10 end
if ShiftingAmount==nil then ShiftingAmount=10 end
local i=0
while i&lt;=GetWidth() do
if math.random(0,1)==0 then
EXE("BitBlt",GDIdc,i,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),MaxSectionWidth,GetHeight(),PFXdc,i,0,SRCPAINT)
else
EXE("BitBlt",GDIdc,i,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),MaxSectionWidth,GetHeight(),PFXdc,i,0,SRCAND)
end
i=i+math.random(MinSectionWidth,MaxSectionWidth)
end
end
function ColorBurnShader(t,R,G,B)
if R==nil then R=0 end
if G==nil then G=255 end
if B==nil then B=0 end
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,SRCCOPY)
local Color=(B&lt;&lt;16)|(G&lt;&lt;8)|R
local Brush=EXE("CreateSolidBrush",Color)
EXE("SelectObject",MEMdc,Brush)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),PATINVERT)
EXE("DeleteObject",Brush)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function ColorOffsetShader(t,OffsettingAmount)
if OffsettingAmount==nil then OffsettingAmount=20 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0x00FFFF)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0xFF00FF)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0xFFFF00)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCAND)
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function ColorOffsetWaveShader(t,OffsettingAmount,MaxWaveHeight,MinWaveHeight,ShiftingAmount)
if OffsettingAmount==nil then OffsettingAmount=20 end
if MaxWaveHeight==nil then MaxWaveHeight=40 end
if MinWaveHeight==nil then MinWaveHeight=10 end
if ShiftingAmount==nil then ShiftingAmount=10 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0x00FFFF)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0xFF00FF)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0xFFFF00)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local i=0
while i&lt;=H do
EXE("BitBlt",MEMdc,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),i,W,MaxWaveHeight,PFXdc,0,i,SRCAND)
EXE("BitBlt",GDIdc,0,i,W,MaxWaveHeight,MEMdc,0,i,SRCCOPY)
i=i+math.random(MinWaveHeight,MaxWaveHeight)
end
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function MEMZTunnelShader(t,TunnelDelay,TunnelScale,ClearScreenChance,FlipColorChance)
if TunnelDelay==nil then TunnelDelay=10 end
if TunnelScale==nil then TunnelScale=0.9 end
if ClearScreenChance==nil then ClearScreenChance=40 end
if FlipColorChance==nil then FlipColorChance=4 end
if math.random(0,ClearScreenChance)==0 or layer==nil or delay==nil then
if math.random(0,FlipColorChance)==0 then
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,NOTSRCCOPY)
else
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,SRCCOPY)
end
layer=1
delay=0
else
delay=delay+1
if delay&gt;=TunnelDelay then
layer=layer*TunnelScale
delay=0
end
if math.random(0,FlipColorChance)==0 then
EXE("StretchBlt",GDIdc,math.floor((GetWidth()-GetWidth()*layer)/2),math.floor((GetHeight()-GetHeight()*layer)/2),math.floor(GetWidth()*layer),math.floor(GetHeight()*layer),PFXdc,0,0,GetWidth(),GetHeight(),NOTSRCCOPY)
else
EXE("StretchBlt",GDIdc,math.floor((GetWidth()-GetWidth()*layer)/2),math.floor((GetHeight()-GetHeight()*layer)/2),math.floor(GetWidth()*layer),math.floor(GetHeight()*layer),PFXdc,0,0,GetWidth(),GetHeight(),SRCCOPY)
end
end
end
function DarkenShader(t,MaxAlpha,MinAlpha)
if MaxAlpha==nil then MaxAlpha=255.0 end
if MinAlpha==nil then MinAlpha=0.0 end
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),BLACKNESS)
local Alpha=math.ceil((MaxAlpha-MinAlpha)*(1.0-t)+MinAlpha)
local BlendFunc=(Alpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,GetWidth(),GetHeight(),BlendFunc)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function LightenShader(t,MaxAlpha,MinAlpha)
if MaxAlpha==nil then MaxAlpha=255.0 end
if MinAlpha==nil then MinAlpha=0.0 end
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),WHITENESS)
local Alpha=math.ceil((MaxAlpha-MinAlpha)*(1.0-t)+MinAlpha)
local BlendFunc=(Alpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,GetWidth(),GetHeight(),BlendFunc)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function LightenFromDarkShader(t,MaxAlpha,MinAlpha)
if MaxAlpha==nil then MaxAlpha=255.0 end
if MinAlpha==nil then MinAlpha=0.0 end
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),BLACKNESS)
local Alpha=math.ceil((MaxAlpha-MinAlpha)*t+MinAlpha)
local BlendFunc=(Alpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,GetWidth(),GetHeight(),BlendFunc)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function DarkenFromLightShader(t,MaxAlpha,MinAlpha)
if MaxAlpha==nil then MaxAlpha=255.0 end
if MinAlpha==nil then MinAlpha=0.0 end
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),WHITENESS)
local Alpha=math.ceil((MaxAlpha-MinAlpha)*t+MinAlpha)
local BlendFunc=(Alpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,GetWidth(),GetHeight(),BlendFunc)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function HatchBrushShader(t,R,G,B,BkR,BkG,BkB)
if R==nil then R=0 end
if G==nil then G=255 end
if B==nil then B=0 end
if BkR==nil then BkR=255 end
if BkG==nil then BkG=0 end
if BkB==nil then BkB=0 end
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,SRCCOPY)
local Color=(B&lt;&lt;16)|(G&lt;&lt;8)|R
local Brush=EXE("CreateHatchBrush",math.random(0,5),Color)
EXE("SelectObject",MEMdc,Brush)
local BkColor=(BkB&lt;&lt;16)|(BkG&lt;&lt;8)|BkR
EXE("SetBKColor",MEMdc,BkColor)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),PATINVERT)
EXE("DeleteObject",Brush)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function TextShader(t,Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
if Text==nil then Text="Hello World" end
if FontHeight==nil then FontHeight=50 end
if FontWidth==nil then FontWidth=30 end
if FontWeight==nil then FontWeight=400 end
if FaceName==nil then FaceName="Fixedsys" end
if Alignment==nil then Alignment=ALIGN_LEFT|ALIGN_TOP end
if Italic==nil then Italic=0 end
if Underline==nil then Underline=0 end
if StrikeOut==nil then StrikeOut=0 end
if PosX==nil then PosX=0 end
if PosY==nil then PosY=0 end
if NoBackground==nil then NoBackground=false end
if TextR==nil then TextR=255 end
if TextG==nil then TextG=255 end
if TextB==nil then TextB=255 end
if BkR==nil then BkR=255 end
if BkG==nil then BkG=0 end
if BkB==nil then BkB=0 end
TextShaderBase(#Text,Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
end
function TypeTextShader(t,Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
if Text==nil then Text="Hello World" end
if FontHeight==nil then FontHeight=50 end
if FontWidth==nil then FontWidth=30 end
if FontWeight==nil then FontWeight=400 end
if FaceName==nil then FaceName="Fixedsys" end
if Alignment==nil then Alignment=ALIGN_LEFT|ALIGN_TOP end
if Italic==nil then Italic=0 end
if Underline==nil then Underline=0 end
if StrikeOut==nil then StrikeOut=0 end
if PosX==nil then PosX=0 end
if PosY==nil then PosY=0 end
if NoBackground==nil then NoBackground=false end
if TextR==nil then TextR=255 end
if TextG==nil then TextG=255 end
if TextB==nil then TextB=255 end
if BkR==nil then BkR=255 end
if BkG==nil then BkG=0 end
if BkB==nil then BkB=0 end
TextShaderBase(math.ceil(#Text*t),Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
end
function DeleteTextShader(t,Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
if Text==nil then Text="Hello World" end
if FontHeight==nil then FontHeight=50 end
if FontWidth==nil then FontWidth=30 end
if FontWeight==nil then FontWeight=400 end
if FaceName==nil then FaceName="Fixedsys" end
if Alignment==nil then Alignment=ALIGN_LEFT|ALIGN_TOP end
if Italic==nil then Italic=0 end
if Underline==nil then Underline=0 end
if StrikeOut==nil then StrikeOut=0 end
if PosX==nil then PosX=0 end
if PosY==nil then PosY=0 end
if NoBackground==nil then NoBackground=false end
if TextR==nil then TextR=255 end
if TextG==nil then TextG=255 end
if TextB==nil then TextB=255 end
if BkR==nil then BkR=255 end
if BkG==nil then BkG=0 end
if BkB==nil then BkB=0 end
TextShaderBase(math.ceil(#Text*(1.0-t)),Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
end
function TextShaderBase(Length,Text,FontHeight,FontWidth,FontWeight,FaceName,Alignment,Italic,Underline,StrikeOut,PosX,PosY,NoBackground,TextR,TextG,TextB,BkR,BkG,BkB)
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,GetWidth(),GetHeight(),PFXdc,0,0,SRCCOPY)
local Color=(TextB&lt;&lt;16)|(TextG&lt;&lt;8)|TextR
EXE("SetTextColor",MEMdc,Color)
if NoBackground then
EXE("SetBkMode",MEMdc,1)
else
EXE("SetBkMode",MEMdc,2)
end
local BkColor=(BkB&lt;&lt;16)|(BkG&lt;&lt;8)|BkR
EXE("SetBKColor",MEMdc,BkColor)
local Font=EXE("CreateFontA",
FontHeight,-- FontHeight
FontWidth,-- FontWidth
0,-- Escapement
0,-- Orientation
FontWeight,-- FontWeight
Italic,-- Italic
Underline,-- Underline
StrikeOut,-- StrikeOut
1,-- CharSet
0,-- OutPrecision
0,-- ClipPrecision
0,-- Quality
0,-- PitchAndFamily
FaceName)-- FaceName
EXE("SelectObject",MEMdc,Font)
MEM.Position=0
MEM.size=8
EXE("GetTextExtentPoint32A",MEMdc,Text,Length,MEM.Memory)
MEM.Position=0
local W=MEM.readDword()
local H=MEM.readDword()
MEM.Position=0
local X=math.floor(PosX)
local Y=math.floor(PosY)
if Alignment==0x0101 then
X=math.floor(PosX)
Y=math.floor(PosY)
end
if Alignment==0x0102 then
X=math.floor(PosX)
Y=math.floor(PosY-H/2)
end
if Alignment==0x0103 then
X=math.floor(PosX)
Y=math.floor(PosY-H)
end
if Alignment==0x0201 then
X=math.floor(PosX-W/2)
Y=math.floor(PosY)
end
if Alignment==0x0202 then
X=math.floor(PosX-W/2)
Y=math.floor(PosY-H/2)
end
if Alignment==0x0203 then
X=math.floor(PosX-W/2)
Y=math.floor(PosY-H)
end
if Alignment==0x0301 then
X=math.floor(PosX-W)
Y=math.floor(PosY)
end
if Alignment==0x0302 then
X=math.floor(PosX-W)
Y=math.floor(PosY-H/2)
end
if Alignment==0x0303 then
X=math.floor(PosX-W)
Y=math.floor(PosY-H)
end
EXE("TextOutA",MEMdc,X,Y,Text,Length)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",Font)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function RotatePoint(X,Y,Angle,OriginX,OriginY)
return OriginX+(X-OriginX)*math.cos(Angle)-(Y-OriginY)*math.sin(Angle),OriginY+(X-OriginX)*math.sin(Angle)+(Y-OriginY)*math.cos(Angle)
end
function RadialBlurShader(t,MaxRotation,BlendAlpha,Iteration)
if MaxRotation==nil then MaxRotation=0.02 end
if BlendAlpha==nil then BlendAlpha=1&lt;&lt;6 end
if Iteration==nil then Iteration=3 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for i=1,Iteration do
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc2,MEM.Memory,MEMdc,0,0,W,H,0,0,0)
MEM.Position=0
local BlendFunc=(BlendAlpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc,0,0,W,H,MEMdc2,0,0,W,H,BlendFunc)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
end
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function RadialPaintShader(t,MaxRotation,Iteration)
if MaxRotation==nil then MaxRotation=0.02 end
if Iteration==nil then Iteration=3 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for i=1,Iteration do
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc2,MEM.Memory,MEMdc,0,0,W,H,0,0,0)
MEM.Position=0
EXE("BitBlt",MEMdc,0,0,W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
end
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function RadialAndShader(t,MaxRotation,Iteration)
if MaxRotation==nil then MaxRotation=0.02 end
if Iteration==nil then Iteration=3 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for i=1,Iteration do
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc2,MEM.Memory,MEMdc,0,0,W,H,0,0,0)
MEM.Position=0
EXE("BitBlt",MEMdc,0,0,W,H,MEMdc2,0,0,SRCAND)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
end
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function InvertPolygonShader(t,MaxSides,MinSides,MaxRadius,MinRadius,MaxCount,MinCount,Delay)
if MaxSides==nil then MaxSides=10 end
if MinSides==nil then MinSides=3 end
if MaxRadius==nil then MaxRadius=400 end
if MinRadius==nil then MinRadius=100 end
if MaxCount==nil then MaxCount=3 end
if MinCount==nil then MinCount=0 end
if Delay==nil then Delay=150 end
local W=GetWidth()
local H=GetHeight()
local Count=math.random(MinCount,MaxCount)
local Polygons={}
for i=1,Count do
local Sides=math.random(MinSides,MaxSides)
local Radius=math.random(MinRadius,MaxRadius)
local X=math.random(0,W)
local Y=math.random(0,H)
local Rotation=math.random()*(2*math.pi)
local AngleStep=2*math.pi/Sides
while Radius&gt;0 do
MEM.Position=0
MEM.size=0
for i=0,Sides-1 do
MEM.size=MEM.size+8
MEM.writeDword(X+math.floor(Radius*math.cos(i*AngleStep+Rotation)))
MEM.writeDword(Y+math.floor(Radius*math.sin(i*AngleStep+Rotation)))
end
MEM.Position=0
table.insert(Polygons,EXE("CreatePolygonRgn",MEM.Memory,Sides,2))
MEM.Position=0
Radius=Radius-50
end
for i=1,Delay do
EXE("BitBlt",GDIdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for _,ThisPolygon in pairs(Polygons) do
EXE("InvertRgn",GDIdc,ThisPolygon)
end
end
end
for _,ThisPolygon in pairs(Polygons) do
EXE("DeleteObject",ThisPolygon)
end
end
function ColorPolygonShader(t,MaxSides,MinSides,MaxRadius,MinRadius,MaxCount,MinCount,Delay,R,G,B)
if MaxSides==nil then MaxSides=10 end
if MinSides==nil then MinSides=3 end
if MaxRadius==nil then MaxRadius=400 end
if MinRadius==nil then MinRadius=100 end
if MaxCount==nil then MaxCount=3 end
if MinCount==nil then MinCount=0 end
if Delay==nil then Delay=150 end
if R==nil then R=0 end
if G==nil then G=255 end
if B==nil then B=0 end
local W=GetWidth()
local H=GetHeight()
local Count=math.random(MinCount,MaxCount)
local Polygons={}
for i=1,Count do
local Sides=math.random(MinSides,MaxSides)
local Radius=math.random(MinRadius,MaxRadius)
local X=math.random(0,W)
local Y=math.random(0,H)
local Rotation=math.random()*(2*math.pi)
local AngleStep=2*math.pi/Sides
while Radius&gt;0 do
MEM.Position=0
MEM.size=0
for i=0,Sides-1 do
MEM.size=MEM.size+8
MEM.writeDword(X+math.floor(Radius*math.cos(i*AngleStep+Rotation)))
MEM.writeDword(Y+math.floor(Radius*math.sin(i*AngleStep+Rotation)))
end
MEM.Position=0
table.insert(Polygons,EXE("CreatePolygonRgn",MEM.Memory,Sides,2))
MEM.Position=0
Radius=Radius-100
end
for i=1,Delay do
local Color=(B&lt;&lt;16)|(G&lt;&lt;8)|R
local Pen=EXE("CreatePen",PS_SOLID,0,Color)
EXE("SelectObject",GDIdc,Pen)
EXE("BitBlt",GDIdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for _,ThisPolygon in pairs(Polygons) do
EXE("FrameRgn",GDIdc,ThisPolygon,Pen,25,25)
end
EXE("DeleteObject",Pen)
end
end
for _,ThisPolygon in pairs(Polygons) do
EXE("DeleteObject",ThisPolygon)
end
end
function RandomColorPolygonShader(t,MaxSides,MinSides,MaxRadius,MinRadius,MaxCount,MinCount,Delay)
if MaxSides==nil then MaxSides=10 end
if MinSides==nil then MinSides=3 end
if MaxRadius==nil then MaxRadius=400 end
if MinRadius==nil then MinRadius=100 end
if MaxCount==nil then MaxCount=3 end
if MinCount==nil then MinCount=0 end
if Delay==nil then Delay=150 end
local W=GetWidth()
local H=GetHeight()
local Count=math.random(MinCount,MaxCount)
local Polygons={}
local Colors={}
for i=1,Count do
local Sides=math.random(MinSides,MaxSides)
local Radius=math.random(MinRadius,MaxRadius)
local X=math.random(0,W)
local Y=math.random(0,H)
local Rotation=math.random()*(2*math.pi)
local AngleStep=2*math.pi/Sides
local R=math.random(0,255)
local G=math.random(0,255)
local B=math.random(0,255)
while Radius&gt;0 do
MEM.Position=0
MEM.size=0
for i=0,Sides-1 do
MEM.size=MEM.size+8
MEM.writeDword(X+math.floor(Radius*math.cos(i*AngleStep+Rotation)))
MEM.writeDword(Y+math.floor(Radius*math.sin(i*AngleStep+Rotation)))
end
MEM.Position=0
table.insert(Polygons,EXE("CreatePolygonRgn",MEM.Memory,Sides,2))
MEM.Position=0
table.insert(Colors,(B&lt;&lt;16)|(G&lt;&lt;8)|R)
Radius=Radius-100
end
for i=1,Delay do
EXE("BitBlt",GDIdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for PolygonID,ThisPolygon in pairs(Polygons) do
local Pen=EXE("CreatePen",PS_SOLID,0,Colors[PolygonID])
EXE("SelectObject",GDIdc,Pen)
EXE("FrameRgn",GDIdc,ThisPolygon,Pen,25,25)
EXE("DeleteObject",Pen)
end
end
end
for _,ThisPolygon in pairs(Polygons) do
EXE("DeleteObject",ThisPolygon)
end
end
function RadialBlurLightenFromDarkShader(t,MaxRotation,BlendAlpha,Iteration,MaxAlpha,MinAlpha)
if MaxRotation==nil then MaxRotation=0.02 end
if BlendAlpha==nil then BlendAlpha=1&lt;&lt;6 end
if Iteration==nil then Iteration=3 end
if MaxAlpha==nil then MaxAlpha=255.0 end
if MinAlpha==nil then MinAlpha=0.0 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
for i=1,Iteration do
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc2,MEM.Memory,MEMdc,0,0,W,H,0,0,0)
MEM.Position=0
local BlendFunc=(BlendAlpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc,0,0,W,H,MEMdc2,0,0,W,H,BlendFunc)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
end
local MEMdc3=EXE("CreateCompatibleDC",GDIdc)
local BMP3=EXE("CreateCompatibleBitmap",GDIdc,GetWidth(),GetHeight())
EXE("SelectObject",MEMdc3,BMP3)
EXE("PatBlt",MEMdc3,0,0,GetWidth(),GetHeight(),BLACKNESS)
local Alpha=math.ceil((MaxAlpha-MinAlpha)*t+MinAlpha)
local BlendFunc=(Alpha&lt;&lt;16)|0x00000000
EXE("AlphaBlend",MEMdc3,0,0,GetWidth(),GetHeight(),MEMdc,0,0,GetWidth(),GetHeight(),BlendFunc)
EXE("BitBlt",GDIdc,0,0,GetWidth(),GetHeight(),MEMdc3,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
EXE("DeleteObject",BMP3)
EXE("DeleteDC",MEMdc3)
end
function RadialAndColorBurnShader(t,MaxRotation,Iteration,R,G,B)
if MaxRotation==nil then MaxRotation=0.02 end
if Iteration==nil then Iteration=3 end
if R==nil then R=0 end
if G==nil then G=255 end
if B==nil then B=0 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Color=(B&lt;&lt;16)|(G&lt;&lt;8)|R
local Brush=EXE("CreateSolidBrush",Color)
EXE("SelectObject",MEMdc,Brush)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),PATINVERT)
EXE("DeleteObject",Brush)
for i=1,Iteration do
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc2,MEM.Memory,MEMdc,0,0,W,H,0,0,0)
MEM.Position=0
EXE("BitBlt",MEMdc,0,0,W,H,MEMdc2,0,0,SRCAND)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
end
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function RadialPaintColorBurnShader(t,MaxRotation,Iteration,R,G,B)
if MaxRotation==nil then MaxRotation=0.02 end
if Iteration==nil then Iteration=3 end
if R==nil then R=0 end
if G==nil then G=255 end
if B==nil then B=0 end
local W=GetWidth()
local H=GetHeight()
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Color=(B&lt;&lt;16)|(G&lt;&lt;8)|R
local Brush=EXE("CreateSolidBrush",Color)
EXE("SelectObject",MEMdc,Brush)
EXE("PatBlt",MEMdc,0,0,GetWidth(),GetHeight(),PATINVERT)
EXE("DeleteObject",Brush)
for i=1,Iteration do
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc2,MEM.Memory,MEMdc,0,0,W,H,0,0,0)
MEM.Position=0
EXE("BitBlt",MEMdc,0,0,W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
end
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc,0,0,SRCCOPY)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
end
function InvertPolygonGlitchShader(t,MaxSides,MinSides,MaxRadius,MinRadius,MaxCount,MinCount,Delay,MaxSectionWidth,MinSectionWidth,ShiftingAmount)
if MaxSides==nil then MaxSides=10 end
if MinSides==nil then MinSides=3 end
if MaxRadius==nil then MaxRadius=400 end
if MinRadius==nil then MinRadius=100 end
if MaxCount==nil then MaxCount=3 end
if MinCount==nil then MinCount=0 end
if Delay==nil then Delay=10 end
if MaxSectionWidth==nil then MaxSectionWidth=150 end
if MinSectionWidth==nil then MinSectionWidth=10 end
if ShiftingAmount==nil then ShiftingAmount=10 end
local W=GetWidth()
local H=GetHeight()
local Count=math.random(MinCount,MaxCount)
local Polygons={}
for i=1,Count do
local Sides=math.random(MinSides,MaxSides)
local Radius=math.random(MinRadius,MaxRadius)
local X=math.random(0,W)
local Y=math.random(0,H)
local Rotation=math.random()*(2*math.pi)
local AngleStep=2*math.pi/Sides
while Radius&gt;0 do
MEM.Position=0
MEM.size=0
for i=0,Sides-1 do
MEM.size=MEM.size+8
MEM.writeDword(X+math.floor(Radius*math.cos(i*AngleStep+Rotation)))
MEM.writeDword(Y+math.floor(Radius*math.sin(i*AngleStep+Rotation)))
end
MEM.Position=0
table.insert(Polygons,EXE("CreatePolygonRgn",MEM.Memory,Sides,2))
MEM.Position=0
Radius=Radius-50
end
for i=1,Delay do
local i=0
while i&lt;=GetWidth() do
if math.random(0,1)==0 then
EXE("BitBlt",GDIdc,i,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),MaxSectionWidth,GetHeight(),PFXdc,i,0,SRCPAINT)
else
EXE("BitBlt",GDIdc,i,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),MaxSectionWidth,GetHeight(),PFXdc,i,0,SRCAND)
end
i=i+math.random(MinSectionWidth,MaxSectionWidth)
end
for _,ThisPolygon in pairs(Polygons) do
EXE("InvertRgn",GDIdc,ThisPolygon)
end
end
end
for _,ThisPolygon in pairs(Polygons) do
EXE("DeleteObject",ThisPolygon)
end
end
function WaveGlitchShader(t,MaxWaveHeight,MinWaveHeight,ShiftingAmount)
if MaxWaveHeight==nil then MaxWaveHeight=10 end
if MinWaveHeight==nil then MinWaveHeight=5 end
if ShiftingAmount==nil then ShiftingAmount=10 end
local i=0
while i&lt;=GetHeight() do
if math.random(0,1)==0 then
EXE("BitBlt",GDIdc,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),i,GetWidth(),MaxWaveHeight,PFXdc,0,i,SRCPAINT)
else
EXE("BitBlt",GDIdc,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),i,GetWidth(),MaxWaveHeight,PFXdc,0,i,SRCAND)
end
i=i+math.random(MinWaveHeight,MaxWaveHeight)
end
end
function ColorOffsetWaveRadialPaintInvertPolygonShader(t,OffsettingAmount,MaxWaveHeight,MinWaveHeight,ShiftingAmount,MaxRotation,Iteration,MaxSides,MinSides,MaxRadius,MinRadius,MaxCount,MinCount,Delay)
if OffsettingAmount==nil then OffsettingAmount=20 end
if MaxWaveHeight==nil then MaxWaveHeight=40 end
if MinWaveHeight==nil then MinWaveHeight=10 end
if ShiftingAmount==nil then ShiftingAmount=10 end
if MaxRotation==nil then MaxRotation=0.015 end
if Iteration==nil then Iteration=2 end
if MaxSides==nil then MaxSides=10 end
if MinSides==nil then MinSides=3 end
if MaxRadius==nil then MaxRadius=200 end
if MinRadius==nil then MinRadius=80 end
if MaxCount==nil then MaxCount=3 end
if MinCount==nil then MinCount=0 end
if Delay==nil then Delay=1 end
local W=GetWidth()
local H=GetHeight()
local Count=math.random(MinCount,MaxCount)
local Polygons={}
for i=1,Count do
local Sides=math.random(MinSides,MaxSides)
local Radius=math.random(MinRadius,MaxRadius)
local X=math.random(0,W)
local Y=math.random(0,H)
local Rotation=math.random()*(2*math.pi)
local AngleStep=2*math.pi/Sides
while Radius&gt;0 do
MEM.Position=0
MEM.size=0
for i=0,Sides-1 do
MEM.size=MEM.size+8
MEM.writeDword(X+math.floor(Radius*math.cos(i*AngleStep+Rotation)))
MEM.writeDword(Y+math.floor(Radius*math.sin(i*AngleStep+Rotation)))
end
MEM.Position=0
table.insert(Polygons,EXE("CreatePolygonRgn",MEM.Memory,Sides,2))
MEM.Position=0
Radius=Radius-20
end
for i=1,Delay do
local MEMdc=EXE("CreateCompatibleDC",GDIdc)
local BMP=EXE("CreateCompatibleBitmap",GDIdc,W,H)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0x00FFFF)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0xFF00FF)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local MEMdc2=EXE("CreateCompatibleDC",GDIdc)
local BMP2=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc2,BMP2)
EXE("BitBlt",MEMdc2,0,0,W,H,PFXdc,0,0,SRCCOPY)
local Brush=EXE("CreateSolidBrush",0xFFFF00)
EXE("SelectObject",MEMdc2,Brush)
EXE("PatBlt",MEMdc2,0,0,W,H,PATINVERT)
EXE("DeleteObject",Brush)
EXE("SelectObject",MEMdc,BMP)
EXE("BitBlt",MEMdc,math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),math.random(-math.abs(OffsettingAmount),math.abs(OffsettingAmount)),W,H,MEMdc2,0,0,SRCPAINT)
EXE("DeleteObject",BMP2)
EXE("DeleteDC",MEMdc2)
local i=0
while i&lt;=H do
EXE("BitBlt",MEMdc,math.random(-math.abs(ShiftingAmount),math.abs(ShiftingAmount)),i,W,MaxWaveHeight,PFXdc,0,i,SRCAND)
i=i+math.random(MinWaveHeight,MaxWaveHeight)
end
local MEMdc3=EXE("CreateCompatibleDC",GDIdc)
local BMP3=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc3,BMP3)
EXE("BitBlt",MEMdc3,0,0,W,H,MEMdc,0,0,SRCCOPY)
for i=1,Iteration do
local MEMdc32=EXE("CreateCompatibleDC",GDIdc)
local BMP32=EXE("CreateCompatibleBitmap",GDIdc,W,H)
EXE("SelectObject",MEMdc32,BMP32)
local Rotation=math.random(-math.abs(MaxRotation*1000.0),math.abs(MaxRotation*1000.0))/1000.0
local TopLeftX,TopLeftY=RotatePoint(0,0,Rotation,W/2,H/2)
local TopRightX,TopRightY=RotatePoint(W,0,Rotation,W/2,H/2)
local BottomLeftX,BottomLeftY=RotatePoint(0,H,Rotation,W/2,H/2)
MEM.Position=0
MEM.size=24
MEM.writeDword(math.floor(TopLeftX))
MEM.writeDword(math.floor(TopLeftY))
MEM.writeDword(math.floor(TopRightX))
MEM.writeDword(math.floor(TopRightY))
MEM.writeDword(math.floor(BottomLeftX))
MEM.writeDword(math.floor(BottomLeftY))
MEM.Position=0
EXE("PlgBlt",MEMdc32,MEM.Memory,MEMdc3,0,0,W,H,0,0,0)
MEM.Position=0
EXE("BitBlt",MEMdc3,0,0,W,H,MEMdc32,0,0,SRCPAINT)
EXE("DeleteObject",BMP32)
EXE("DeleteDC",MEMdc32)
end
EXE("BitBlt",GDIdc,0,0,W,H,MEMdc3,0,0,SRCCOPY)
EXE("DeleteObject",BMP3)
EXE("DeleteDC",MEMdc3)
EXE("DeleteObject",BMP)
EXE("DeleteDC",MEMdc)
for _,ThisPolygon in pairs(Polygons) do
EXE("InvertRgn",GDIdc,ThisPolygon)
end
end
end
for _,ThisPolygon in pairs(Polygons) do
EXE("DeleteObject",ThisPolygon)
end
end
-- Initialization:
TotalTicks=GetPPQ()*4*672
SetMicroseconds(-3*S)
SetVolume(1.00)
SetMute(0)
SetPlaybackSpeed(1.00)
SetNoteSpeed(0.25)
SetStartKey(0)
SetEndKey(127)
SetKeyMode(0)
SetOffsetX(0.00)
SetOffsetY(0.00)
SetZoom(1.00)
SetPaused(0)
SetKeyboard(1)
SetVisualizePitchBends(1)
SetPhigrosMode(1)
SetShowMarkers(1)
SetTickBased(1)
SetDisableUI(0)
SetLimitFPS(1)
SetCaption("")
-- Do this if you have color events on the first tick:
SetMicroseconds(0)
while (GetMicroseconds()&lt;1) do end
SetMicroseconds(0)
-- Main Program:
RunShaderByTickAndWait(0,GetPPQ()*4*32,RadialBlurLightenFromDarkShader,0.04,nil,nil,255,63)
RunShaderByTickAndWait(GetPPQ()*4*32,GetPPQ()*4*34,DarkenFromLightShader,255,63)
RunShaderByTickAndWait(GetPPQ()*4*34,GetPPQ()*4*64,PlainShader)
RunShaderByTickAndWait(GetPPQ()*4*64,GetPPQ()*4*96,GlitchShader)
RunShaderByTickAndWait(GetPPQ()*4*96,GetPPQ()*4*144,WaveShader,nil,nil,3)
RunShaderByTickAndWait(GetPPQ()*4*144,GetPPQ()*4*160,ColorOffsetShader)
RunShaderByTickAndWait(GetPPQ()*4*160,GetPPQ()*4*176,RadialAndColorBurnShader,nil,nil,255,255,0)
RunShaderByTickAndWait(GetPPQ()*4*176,GetPPQ()*4*192,RadialAndColorBurnShader,nil,nil,0,255,0)
RunShaderByTickAndWait(GetPPQ()*4*192,GetPPQ()*4*208,RadialAndColorBurnShader,nil,nil,255,0,255)
RunShaderByTickAndWait(GetPPQ()*4*208,GetPPQ()*4*224,RadialAndColorBurnShader,nil,nil,255,0,0)
RunShaderByTickAndWait(GetPPQ()*4*224,GetPPQ()*4*256,RadialPaintShader)
RunShaderByTickAndWait(GetPPQ()*4*256,GetPPQ()*4*320,ColorOffsetWaveShader)
RunShaderByTickAndWait(GetPPQ()*4*320,GetPPQ()*4*384,InvertPolygonGlitchShader)
RunShaderByTickAndWait(GetPPQ()*4*384,GetPPQ()*4*448,WaveShader,nil,nil,10)
RunShaderByTickAndWait(GetPPQ()*4*448,GetPPQ()*4*480,PlainShader)
RunShaderByTickAndWait(GetPPQ()*4*480,GetPPQ()*4*512,RadialPaintColorBurnShader,0.01,5,0,0,255)
RunShaderByTickAndWait(GetPPQ()*4*512,GetPPQ()*4*544,WaveGlitchShader,40,10,3)
RunShaderByTickAndWait(GetPPQ()*4*544,GetPPQ()*4*576,PlainShader)
RunShaderByTickAndWait(GetPPQ()*4*576,GetPPQ()*4*640,ColorOffsetWaveRadialPaintInvertPolygonShader,50)
RunShaderByTickAndWait(GetPPQ()*4*640,GetPPQ()*4*653,DarkenShader)
--[[
Notice:
Cheat Engine's UI may freeze and stop responding while the script is running.
This is a normal phenomenon, please do not kill this process!
]]
while GetTicks()&lt;=TotalTicks do end
MEM.destroy()
MEM.destroy()
sleep(1)
MEM=nil
</LuaScript>
</CheatTable>
